/*
Example API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WeightEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeightEntry{}

// WeightEntry struct for WeightEntry
type WeightEntry struct {
	Weight float64 `json:"weight"`
	Date string `json:"date"`
}

type _WeightEntry WeightEntry

// NewWeightEntry instantiates a new WeightEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeightEntry(weight float64, date string) *WeightEntry {
	this := WeightEntry{}
	this.Weight = weight
	this.Date = date
	return &this
}

// NewWeightEntryWithDefaults instantiates a new WeightEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeightEntryWithDefaults() *WeightEntry {
	this := WeightEntry{}
	return &this
}

// GetWeight returns the Weight field value
func (o *WeightEntry) GetWeight() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *WeightEntry) GetWeightOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *WeightEntry) SetWeight(v float64) {
	o.Weight = v
}

// GetDate returns the Date field value
func (o *WeightEntry) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *WeightEntry) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *WeightEntry) SetDate(v string) {
	o.Date = v
}

func (o WeightEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeightEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["weight"] = o.Weight
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

func (o *WeightEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"weight",
		"date",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWeightEntry := _WeightEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWeightEntry)

	if err != nil {
		return err
	}

	*o = WeightEntry(varWeightEntry)

	return err
}

type NullableWeightEntry struct {
	value *WeightEntry
	isSet bool
}

func (v NullableWeightEntry) Get() *WeightEntry {
	return v.value
}

func (v *NullableWeightEntry) Set(val *WeightEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableWeightEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableWeightEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeightEntry(val *WeightEntry) *NullableWeightEntry {
	return &NullableWeightEntry{value: val, isSet: true}
}

func (v NullableWeightEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeightEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


